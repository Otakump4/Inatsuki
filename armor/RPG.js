
/*
case 'missao-f':
  if (!isRegistro) return reply('Voc√™ n√£o est√° registrado. Digite *${prefix}registrar* para se cadastrar.');
  if (!q) return reply(`Digite o nome do personagem. Que Voce In√≠cio a Miss√£o Por exemplo: *${prefix}missao-tesouro tailong*`);

  const dataxaa = fs.readFileSync('./RPG/personagem.json');
  const personagensssc = JSON.parse(dataxaa);

  mostrarPersonagedmm(q);

  function mostrarPersonagedmm(nome) {
    const personagemdzz = personagensssc.find(p => p.nome === nome);
    if (personagemdzz) {
      var missao = "Voc√™ N√£o T√™m Missao Dispon√≠veis";
      var missao2 = "F";
      var MisaoConcluida = personagemdzz.totalm;

      executarMissao(missao, personagemdzz);
      executarMissao(missao2, personagemdzz);
      
  

  function executarMissao(nomeMissao, personagem) {
  
    if (personagem.classi && personagem.classi === nomeMissao) {
      dins = Math.floor((Math.random() * 233) * 2);
      
      // Executar a l√≥gica da miss√£o aqui
            var MisaoConcluida = personagemdzz.totalm;

let missoesConcluidas = MisaoConcluida;

const resultado = Math.random(); // Gera um n√∫mero aleat√≥rio entre 0 e 1
if (resultado < 0.5) {
// ... c√≥digo do jogo ...
let missaoConcluida = true; 
Missaog = Math.floor((Math.random() * 2) + 2);
let missoesConcluidas = MisaoConcluida;
reply(`üìú *REALIZANDO MISS√ÉO* üìú

*üî∞ MISS√ÉO: ${nomeMissao}*
*üöπ PERSONAGEM: ${personagem.nome}*
*ü™ô RECOMPENSA: ${dins}*`);

  addGanhaMissao(q, Missaog)
 
} else {
  reply("Voc√™ perdeu a miss√£o.");
  let missaoConcluida = false; 
}
// Quando o personagem concluir uma miss√£o, voc√™ incrementa a vari√°vel "missoesConcluidas"
missoesConcluidas++;

// Verifique se o personagem atingiu a quantidade m√≠nima de miss√µes para avan√ßar para a pr√≥xima classe
if (missoesConcluidas >= 20) {
    // Atualize a classe atual do personagem para a pr√≥xima classe
    //classeAtual = proximaClasse(classeAtual);
    // Reinicie o contador de miss√µes conclu√≠das
    addClass(q, "E")
    //missoesConcluidas = 0;
    ZerarMissao(q, 0)
    reply(`parab√©ns seu personagem foi para pr√≥xima classe √© suas miss√µes foram zeradas agora para iniciar a miss√£o da classe *E* digite ${prerix}missao-e ou digite ${prefix}personagem *nome do seu personagem* para mais informa√ß√µes`)
      }
      
    } else {
      reply(`Esta Classe n√£o est√° dispon√≠vel para o personagem ${personagem.nome} Ou Voce Estar Sem Missao Digital ${prefix}*iniciar-missao*`);
    }
  }
  const sd = "Voc√™ N√£o T√™m Missao Dispon√≠veis";
  addMissao(q, sd, sd, sd);
      } else {
      reply('Personagem n√£o encontrado.');
    }
    }
break;

case 'rank':
const personagensrank = require('./RPG/personagem.json');

// Fun√ß√£o para comparar os atributos e ordenar os personagens
function compararAtributo(atributo) {
  return function(a, b) {
    return b[atributo] - a[atributo];
  }
}

// Ordenar os personagens pelo atributo de ataque em ordem decrescente
const rankingAtaque = personagensrank.sort(compararAtributo('ataque'));

// Obter os cinco primeiros do ranking de ataque
const top5Ataque = rankingAtaque.slice(0, 5);

// Imprimir o resultado do ranking de ataque
console.log("Ranking de Ataque:");

top5Ataque.forEach((personagem, index) => {
let leaderboardlvl = ' TOP 5 MAIS EVOLU√çDOS\n\n'
let nom = 0

for (let i = 0; i < 5; i++) {
nom++
leaderboardlvl += `
‚ù§Ô∏è *HEROI: ${nom} ${personagem.nome}*
‚öîÔ∏è *ATK: ${personagem.ataque}*
\n`

}
leaderboardlvl += `TOP 5 MAIS EVOLU√çDOS`
zenitsu.sendMessage(from, {text: leaderboardlvl}, {quoted: info})
});
break
*/